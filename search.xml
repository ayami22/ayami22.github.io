<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity使用Luban+LitJson插件实现Excel转Json，Xml等并进行读取。</title>
      <link href="/2025/05/26/Unity/Unity%E4%BD%BF%E7%94%A8Luban+LitJson%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0Excel%E8%BD%ACJson%EF%BC%8CXml%E7%AD%89%E5%B9%B6%E8%BF%9B%E8%A1%8C%E8%AF%BB%E5%8F%96%E3%80%82/"/>
      <url>/2025/05/26/Unity/Unity%E4%BD%BF%E7%94%A8Luban+LitJson%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0Excel%E8%BD%ACJson%EF%BC%8CXml%E7%AD%89%E5%B9%B6%E8%BF%9B%E8%A1%8C%E8%AF%BB%E5%8F%96%E3%80%82/</url>
      
        <content type="html"><![CDATA[<h2 id="配置Luban环境并创建Unity项目"><a href="#配置Luban环境并创建Unity项目" class="headerlink" title="配置Luban环境并创建Unity项目"></a>配置Luban环境并创建Unity项目</h2><p><a href="https://luban.doc.code-philosophy.com/docs/beginner/quickstart">Luban官方文档</a></p><ol><li><p>安装<a href="https://dotnet.microsoft.com/download/dotnet/8.0">dotnet sdk 8.0</a>或更高版本sdk。（根据自己的系统下载对应的sdk。我的是windows所以我用的Windows x64版本）</p></li><li><p>下载<a href="https://gitee.com/focus-creative-games/luban_examples">luban_examples项目</a>。（Gitee需要登陆才能下载，如果不想登录可以去Github下载。这里放上Luban的Github链接：<a href="https://github.com/focus-creative-games/luban_examples">https://github.com/focus-creative-games/luban_examples</a>）</p></li></ol><p><img src="/../../assets/image-20250526201117-miykfr6.png" alt="image"></p><p>下载完成后我们新建一个Unity项目，准备将Luban部署到Unity项目里。</p><p>创建好Unity项目后，打开Unity项目目录创建一个  <code>LubanConfig </code>​ 。然后将我们下载的Luban插件里 <code>Tools/Luban</code>​ 和 <code>MiniTemplate</code>​ 文件夹放进去。</p><p><img src="/../../assets/image-20250526202416-pqurkkj.png" alt="image"></p><p><img src="/../../assets/image-20250526202726-rcu9aqo.png" alt="image"></p><p>接下来我们打开刚刚放进 <code>LubanConfig/MiniTemplate</code>​ 文件夹。</p><p>Datas文件夹是我们创建Excel配置表的地方。</p><p>Output是我们点击gen.bat后生成Json、Xml文件的地方。</p><p>接下来我们修改一下生成Json、Xml文件的存放路径。</p><p>右键编辑 <code>gen.bat</code>​ 文件</p><p>我们打开gen.bat文件后长这样：</p><p><img src="/../../assets/image-20250526203736-sabtz97.png" alt="image"></p><p>我们需要修改路径地址为我们Unity项目Assets文件夹下存放数据文件的路径，我的是：<code>Game_Demo/../../assets/Project/DataTable</code>​</p><p>由于我们所在的文件夹是<code>你的Unity项目名称/LubanConfig/MiniTemplate</code>​ ，所以需要后退两次到项目文件夹。</p><p><img src="/../../assets/image-20250526204309-5c79zrq.png" alt="image"></p><p>简单介绍 bat 文件中各项参数：</p><ul><li>​<code>LUBAN_DLL</code>​ Luban.dll 文件的路径。指向 luban_examples&#x2F;Tools&#x2F;Luban&#x2F;Luban.dll</li><li>​<code>CONF_ROOT </code>​配置项目的路径。指向 luban_examples&#x2F;DesignerConfigs</li><li>​<code>-t </code>​生成目标。可以为 client、server、all 之类的值</li><li>​<code>-c</code>​ 生成的代码类型。 cs-simple-json 为生成使用 SimpleJSON 加载 json 数据的 c# 代码</li><li>​<code>-d</code>​ 生成的数据类型。 如果我们想生成其他类型，将后面的json改为需要类型即可，比如xml。</li><li>​<code>inputDataDir </code>​配置表（如 xlsx ）的根目录</li><li>​<code>outputCodeDir</code>​ c# 代码的输出目录</li><li>​<code>outputDataDir </code>​json 数据的输出目录</li></ul><p>运行该脚本，如果一切正常，会产生一系列日志，最终一行是 bye~。</p><h2 id="创建Excel配置文件生成Json、xml等文件"><a href="#创建Excel配置文件生成Json、xml等文件" class="headerlink" title="创建Excel配置文件生成Json、xml等文件"></a>创建Excel配置文件生成Json、xml等文件</h2><p>配置到Unity之后我们就可以进行Excel配表了。可以看<a href="https://luban.doc.code-philosophy.com/docs/beginner/quickstart#%E5%88%9B%E5%BB%BAreward%E8%A1%A8">Luban官方文档快速上手</a>跟着创建reward.xlsx配置表。</p><p>不想来回切页面可以跟着我一起创建。</p><p>配置好之后我们进入 <code>MiniTemplate/Datas</code>​ 文件夹。</p><p><img src="/../../assets/image-20250526204719-ajh9daq.png" alt="image"></p><p>​<code>#demo.item.xlsx</code>​ 文件是Luban的一个示例文件，打开长这样。</p><p><img src="/../../assets/image-20250526204933-srothvx.png" alt="image"></p><p>简略介绍一下文件格式：</p><ul><li>第1行是字段名行。单元格 A1 必须以##开头。表示这是一个有效数据表。</li><li>第2行是字段类型行。第1个单元格必须为 ##type。</li><li>第3行是分组行。<code>c</code>​表示字段属于客户端，<code>s</code>​表示属于属于服务器,<code>c,s</code>​表示同时属于所有，留空也表示属于所有。</li><li>第4行是注释行。 以##开头。 可以有0-N个注释行，而且可以出现在任何位置</li><li>第5行起是数据行。</li></ul><p>luban并没有限制标题头行的位置和数量。像##xxx之类的行可以任意调整顺序和位置，而##group和##行也是可选的。</p><p>接下来我们可以直接删了这个 <code>#demo.item.xlsx</code>​ 文件，因为他一会儿会跟着生成Json文件。</p><p>在当前Datas页面创建一个 <code>reward.xlsx</code>​ 文件。具体内容如下</p><p><img src="/../../assets/image-20250526205631-d2jo9zz.png" alt="image"></p><p>‍</p><p>创建好我们的 <code>reward.xlsx</code>​ 配置表后，我们需要在主表中加入我们创建好的 <code>reward.xlsx</code>​ 参数和路径。</p><p><img src="/../../assets/image-20250526205808-v7kajif.png" alt="image"></p><p>‍</p><p>表字段说明：</p><table><thead><tr><th>字段</th><th>可空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>full_name</td><td>否</td><td></td><td>类型全名，即可以是不包含命名空间，如 Hello，也可以包含命名空间如 item.Item</td></tr><tr><td>flags</td><td>是</td><td>false</td><td>等价schema逻辑结构中isFlags字段</td></tr><tr><td>unique</td><td>是</td><td>false</td><td>当前enum内的所有枚举值必须唯一，等价schema逻辑结构中isUniqueItemId字段</td></tr><tr><td>comment</td><td>是</td><td></td><td></td></tr><tr><td>tags</td><td>是</td><td></td><td>填写方式为 key1=value1#key2=value2…</td></tr><tr><td>items</td><td>否</td><td></td><td>枚举项列表</td></tr></tbody></table><p>‍</p><p>配置好后我们可以点击 <code>gen.bat</code>​ 测试能否生成Json文件了</p><p><img src="/../../assets/image-20250526211412-8zrd3xd.png" alt="image"></p><p>打开unity看一看，没有问题。</p><p><img src="/../../assets/image-20250526211446-8zm2jy4.png" alt="image"></p><h2 id="使用LitJson读取Json文件。"><a href="#使用LitJson读取Json文件。" class="headerlink" title="使用LitJson读取Json文件。"></a>使用LitJson读取Json文件。</h2><p>在我们的Assets文件夹里创建一个Scripts文件夹，创建一个 <code>demo.cs</code>​ 文件。用Visual Studio打开。</p><p>然后我们点击 <code>工具 - &gt; NuGet包管理器 - &gt; 管理解决方案的NuGet包</code>​ 在浏览里搜索LitJson，点击安装。我这已经安装好了。</p><p><img src="/../../assets/image-20250526212750-u1m7s0k.png" alt="image"></p><p>接着在我们Unity项目根目录里找到Packages文件夹，打开可以看到我们下载的LitJson。</p><p>接下来我们打开LitJson文件夹，找到对应版本NET文件夹下的LitJSON.dll。把这个文件放在 <code>../../assets/Plugins</code>​ 文件夹下即可</p><p><img src="/../../assets/image-20250526212901-owxlfzq.png" alt="image"></p><p>不同版本的Unity默认的Mono虚拟机版本不同，可能需要导入不同版本的程序库。选择主菜单的Edit→Project Settings，打开Project Settings，选择左侧Player（播放器，）然后再右侧的Other Settings中找到Scripting Runtime Version，可以看到当前脚本运行环境的版本</p><p>也可以用脚本来查看，可以在脚本中通过以下方式来查看：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">string</span> <span class="string">unityVersion</span> <span class="string">=</span> <span class="string">Application.unityVersion;</span></span><br><span class="line"><span class="string">Debug.Log(&quot;当前Unity版本：&quot;</span> <span class="string">+</span> <span class="string">unityVersion);</span></span><br></pre></td></tr></table></figure><p>这样就能够在Unity编辑器的控制台中看到当前脚本运行环境的版本信息。</p><p>‍</p><p>我的是.Net Standard 2.0，所以我就将 <code>LitJson/lib/netstandard2.0/LitJSON.dll</code>​ 文件放进去了。</p><p><img src="/../../assets/image-20250526213702-hnpe93u.png" alt="image"></p><p>导入后我们就可以写我们的读取代码了：</p><p>以下是 <code>Demo.cs</code>​ 代码</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Weapon</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> id;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> desc;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> jsonStr;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        jsonStr = File.ReadAllText(Application.dataPath + <span class="string">&quot;/Project/DataTable/demo_tbreward.json&quot;</span>);</span><br><span class="line">        <span class="comment">// Weapon[] arr = JsonMapper.ToObject&lt;Weapon[]&gt;(jsonStr);</span></span><br><span class="line">        List&lt;Weapon&gt; list = JsonMapper.ToObject&lt;List&lt;Weapon&gt;&gt;(jsonStr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> list)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(item.name + <span class="string">&quot; &quot;</span> + item.desc + <span class="string">&quot; &quot;</span> + item.count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注解：</p><ul><li><p><strong>Application：</strong> 是Stream.IO的一个类，用于操作和获取当前应用程序的信息。</p></li><li><p><strong>Application.dataPath ：</strong> 属性，返回应用程序的数据路径。（……&#x2F;你的Unity项目名称&#x2F;..&#x2F;..&#x2F;assets&#x2F;）</p></li><li><p><strong>JsonMapper：</strong>  是LitJson的一个工具类，存有静态方法。</p></li><li><p><strong>JsonMapper.ToObject(json)：</strong> 将一个json字符串解析成一个类对象</p></li><li><p><strong>JsonMapper.ToJson：</strong> 将一个类对象转化成一个json字符串</p></li></ul><p>敲完之后点击运行：</p><p><img src="/../../assets/image-20250526220631-1dz24rc.png" alt="image"></p><p>读取完成，希望这篇文章对你有所帮助。</p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://blog.csdn.net/qq_33795300/article/details/131364030#:~:text=Unity%E7%9A%84Application%E7%B1%BB%E6%8F%90%E4%BE%9B%E4%BA%86%E8%8E%B7%E5%8F%96%E5%92%8C%E6%93%8D%E4%BD%9C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%BF%A1%E6%81%AF%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E5%A6%82%E7%89%88%E6%9C%AC%E3%80%81%E8%BF%90%E8%A1%8C%E5%B9%B3%E5%8F%B0%E3%80%81%E6%95%B0%E6%8D%AE%E8%B7%AF%E5%BE%84%E7%AD%89%E3%80%82,%E5%AE%83%E5%8C%85%E6%8B%ACidentifier%E3%80%81version%E3%80%81unityVersion%E3%80%81productName%E3%80%81companyName%E7%AD%89%E5%B1%9E%E6%80%A7%EF%BC%8C%E4%BB%A5%E5%8F%8AisEditor%E3%80%81isFocused%E3%80%81isPlaying%E7%AD%89%E6%96%B9%E6%B3%95%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%88%A4%E6%96%AD%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E3%80%82">深入了解Unity的Application类：一份详细的技术指南(二)</a></p><p><a href="https://cloud.tencent.com/developer/article/2380606">Unity 数据读取|（四）Json文件解析（Newtonsoft.Json ，Litjson，JsonUtility，SimpleJSON）</a></p><p><a href="https://yufulao.cn/posts/f1209f90/index.html">Luban数据配表方案</a></p><p><a href="https://blog.csdn.net/P_newbie/article/details/132261025">强力配置工具Luban使用教程</a></p><p><a href="https://blog.csdn.net/m0_63024355/article/details/132653036">Unity——LitJSON的安装</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Luban </tag>
            
            <tag> LitJson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建个人博客</title>
      <link href="/2025/05/26/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/26/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="建立博客"><a href="#建立博客" class="headerlink" title="建立博客"></a>建立博客</h2><p><a href="https://blog.csdn.net/2303_76953932/article/details/145233223">https://blog.csdn.net/2303_76953932&#x2F;article&#x2F;details&#x2F;145233223</a></p><p>‍</p><h2 id="Hexo发布文章："><a href="#Hexo发布文章：" class="headerlink" title="Hexo发布文章："></a>Hexo发布文章：</h2><ol><li>将写好的markdown文章放在 <strong>​<code>source/_posts</code>​</strong>​ 文件夹下，将引用的资源放在<strong>​<code>source/assets</code>​</strong>​ 文件夹下。</li><li>依次输入执行下面的命令：</li></ol><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">hexo clean<span class="comment">//清除旧的数据，如非更换主题，则可以尽量不使用。一般发布文章使用下面几个命令就够了</span></span><br><span class="line">hexo g<span class="comment">//这个命令会将source文件夹下所有的md文件进行渲染，生成HTML页面，存放在public文件夹下</span></span><br><span class="line">hexo s<span class="comment">//重新生成页面后，我们可以在本地开启服务器，预览一下文章是否满意</span></span><br><span class="line">hexo d<span class="comment">//将网站部署到服务器上，也就是 Github.io 上</span></span><br></pre></td></tr></table></figure><p>（注：新生成的hexo项目source文件夹下没有assets文件夹，自己手动创建一个就行）</p><p><strong>参考文章：</strong></p><p><a href="https://fuguigui.github.io/hexo2/">一次完整的Hexo写作流程</a></p><h2 id="修改hexo主题"><a href="#修改hexo主题" class="headerlink" title="修改hexo主题"></a>修改hexo主题</h2><p><a href="https://zhuanlan.zhihu.com/p/385525053">https://zhuanlan.zhihu.com/p/385525053</a>     – 修改主题教程</p><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a>– 各种hexo主题</p><p>主题：</p><p><a href="https://github.com/volantis-x/hexo-theme-volantis/#5.8.0">https://github.com/volantis-x/hexo-theme-volantis/#5.8.0</a>– volantis主题</p><h3 id="Butterfly主题配置"><a href="#Butterfly主题配置" class="headerlink" title="Butterfly主题配置"></a>Butterfly主题配置</h3><p>‍</p><p><a href="https://butterfly.js.org/">Butterfly官方文档</a></p><p><a href="https://www.cnblogs.com/MoYu-zc/p/14395965.html">Butterfly美化</a></p><p><a href="https://blog.csdn.net/JesseXW/article/details/135649752">Butterfly自定义主页方法</a></p><p><a href="https://blog.captainz.cc/posts/hexo_butterfly_top_img.html">Hexo+Butterfly 主题一图流背景与顶部图修改</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/18269048#_label3_0_2_1">Butterfly主题美化配置</a></p><p><a href="https://blog.mitsumune.top/2023/02/13/hexo_butterfly%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%AF%B9%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87api%E7%9A%84%E6%94%AF%E6%8C%81/">hexo butterfly主题添加对随机图片api的支持</a></p><h4 id="Page-Front-matter和Post-Front-matter"><a href="#Page-Front-matter和Post-Front-matter" class="headerlink" title="Page Front-matter和Post Front-matter"></a>Page Front-matter和Post Front-matter</h4><p><a href="https://blog.csdn.net/qq_43444349/article/details/105282118">front-matter参数的解释与设置</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page Front-matter</span><br><span class="line">---</span><br><span class="line">title:【必需】頁面標題</span><br><span class="line">date:【必需】頁面創建日期</span><br><span class="line">updated:【可選】頁面更新日期</span><br><span class="line">type:【必需】標籤、分類和友情鏈接三個頁面需要配置</span><br><span class="line">comments:【可選】顯示頁面評論模塊 (默認 true)</span><br><span class="line">description:【可選】頁面描述</span><br><span class="line">keywords:【可選】頁面關鍵字</span><br><span class="line">top_img:【可選】頁面頂部圖片</span><br><span class="line">mathjax:【可選】顯示 mathjax (當設置 mathjax 的 per_page: false 時，才需要配置，默認 false)</span><br><span class="line">katex:【可選】顯示 katex (當設置 katex 的 per_page: false 時，才需要配置，默認 false)</span><br><span class="line">aside:【可選】顯示側邊欄 (默認 true)</span><br><span class="line">aplayer:【可選】在需要的頁面加載 aplayer 的 js 和 css,請參考文章下面的音樂 配置</span><br><span class="line">highlight_shrink:【可選】配置代碼框是否展開 (true/false) (默認為設置中 highlight_shrink 的配置)</span><br><span class="line">random:【可選】配置友情鏈接是否隨機排序（默認為 false）</span><br><span class="line">limit:【可選】配置説説顯示數量</span><br><span class="line">  type:【可選】配置説説顯示數量的類型 （date 或者 num）</span><br><span class="line">  value:【可選】配置説説顯示數量的值</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Post Front-matter</span><br><span class="line">---</span><br><span class="line">title:【必需】文章標題</span><br><span class="line">date:【必需】文章創建日期</span><br><span class="line">updated:【可選】文章更新日期</span><br><span class="line">tags:【可選】文章標籤</span><br><span class="line">categories:【可選】文章分類</span><br><span class="line">keywords:【可選】文章關鍵字</span><br><span class="line">description:【可選】文章描述</span><br><span class="line">top_img:【可選】文章頂部圖片</span><br><span class="line">comments:【可選】顯示文章評論模塊(默認 true)</span><br><span class="line">cover:【可選】文章縮略圖(如果沒有設置 top_img,文章頁頂部將顯示縮略圖，可設為 false/圖片地址/留空)</span><br><span class="line">toc:【可選】顯示文章 TOC(默認為設置中 toc 的 enable 配置)</span><br><span class="line">toc_number:【可選】顯示 toc_number(默認為設置中 toc 的 number 配置)</span><br><span class="line">toc_style_simple:【可選】顯示 toc 簡潔模式</span><br><span class="line">copyright:【可選】顯示文章版權模塊(默認為設置中 post_copyright 的 enable 配置)</span><br><span class="line">copyright_author:【可選】文章版權模塊的文章作者</span><br><span class="line">copyright_author_href:【可選】文章版權模塊的文章作者鏈接</span><br><span class="line">copyright_url:【可選】文章版權模塊的文章連結鏈接</span><br><span class="line">copyright_info:【可選】文章版權模塊的版權聲明文字</span><br><span class="line">mathjax:【可選】顯示 mathjax(當設置 mathjax 的 per_page: false 時，才需要配置，默認 false )</span><br><span class="line">katex:【可選】顯示 katex (當設置 katex 的 per_page: false 時，才需要配置，默認 false )</span><br><span class="line">aplayer:【可選】在需要的頁面加載 aplayer 的 js 和 css,請參考文章下面的音樂 配置</span><br><span class="line">highlight_shrink:【可選】配置代碼框是否展開(true/false)(默認為設置中 highlight_shrink 的配置)</span><br><span class="line">aside:【可選】顯示側邊欄 (默認 true)</span><br><span class="line">abcjs:【可選】加載 abcjs (當設置 abcjs 的 per_page: false 時，才需要配置，默認 false )</span><br><span class="line">noticeOutdate:【可選】文章過期提醒 (默認為設置中 noticeOutdate 的 enable 配置)</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="Hexo-Butterfly-algolia-配置搜索"><a href="#Hexo-Butterfly-algolia-配置搜索" class="headerlink" title="Hexo+Butterfly+algolia 配置搜索"></a>Hexo+Butterfly+algolia 配置搜索</h4><p><a href="https://www.wuxx.top/2024/05/27/algolia-use/index.html">https://www.wuxx.top/2024/05/27/algolia-use/index.html</a></p><p>（注意点：如果你是windows用户，在 <code>此电脑-&gt;右键属性-&gt;高级系统设置-&gt;环境变量-&gt;</code>​ 里的用户变量或系统变量里注册。）</p><h4 id="【Vercel】Twikoo-为你的HEXO加入评论系统"><a href="#【Vercel】Twikoo-为你的HEXO加入评论系统" class="headerlink" title="【Vercel】Twikoo | 为你的HEXO加入评论系统"></a>【Vercel】Twikoo | 为你的HEXO加入评论系统</h4><p><a href="https://tech.yemengstar.com/hexo-tutorial-theme-butterfly-comments/">https://tech.yemengstar.com/hexo-tutorial-theme-butterfly-comments/</a></p><p>（注：域名就是你的博客网站的域名）</p><h4 id="hexo-Butterfly添加音乐播放器"><a href="#hexo-Butterfly添加音乐播放器" class="headerlink" title="hexo+Butterfly添加音乐播放器"></a>hexo+Butterfly添加音乐播放器</h4><p><a href="https://blog.csdn.net/qq_41467882/article/details/124734598">Hexo-Butterfly音乐播放器的添加</a></p><p>‍</p><p>注：关闭底部吸附歌词的方法：设置属性：<code>data-lrc-type=&quot;0&quot;</code>​</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/modify.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># 吸附底部的音乐播放器</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;13519966293&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span>   <span class="string">data-order=&quot;list&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-preload=&quot;auto&quot;</span> <span class="string">data-autoplay=&quot;false&quot;</span> <span class="string">data-mutex=&quot;true&quot;</span> <span class="string">data-lrc-type=&quot;0&quot;</span> <span class="string">&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在Hexo博客上添加Live2D角色"><a href="#在Hexo博客上添加Live2D角色" class="headerlink" title="在Hexo博客上添加Live2D角色"></a>在Hexo博客上添加Live2D角色</h4><p><a href="https://zahi0.github.io/2022/01/21/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E6%B7%BB%E5%8A%A0Live2d%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/">https://zahi0.github.io/2022/01/21/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E6%B7%BB%E5%8A%A0Live2d%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/</a></p><p><a href="https://zhuanlan.zhihu.com/p/593536116">https://zhuanlan.zhihu.com/p/593536116</a></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 创建个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏美术风格设计底层逻辑</title>
      <link href="/2025/05/25/3D_Art/%E6%B8%B8%E6%88%8F%E7%BE%8E%E6%9C%AF%E9%A3%8E%E6%A0%BC%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91/"/>
      <url>/2025/05/25/3D_Art/%E6%B8%B8%E6%88%8F%E7%BE%8E%E6%9C%AF%E9%A3%8E%E6%A0%BC%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p><strong>参考视频：</strong></p><p><a href="https://www.bilibili.com/video/BV1984y1X7ch/?spm_id_from=333.337.search-card.all.click">原创风格公式。正确认识游戏美术风格</a></p><h1 id="游戏美术设计，三个底层逻辑："><a href="#游戏美术设计，三个底层逻辑：" class="headerlink" title="游戏美术设计，三个底层逻辑："></a>游戏美术设计，三个底层逻辑：</h1><p><img src="/../../assets/network-asset-1699862560615-aa839dbd-8de2-4f6d-ad30-42b8e177235e-20250525203434-vmmq059.png" alt="image.png"><br><img src="/../../assets/network-asset-1699862581488-15ac243c-3fdc-4f13-ad31-99a073b37adc-20250525203434-cev94ta.png" alt="image.png"></p><h1 id="第一条：正确认识风格"><a href="#第一条：正确认识风格" class="headerlink" title="第一条：正确认识风格"></a>第一条：正确认识风格</h1><h2 id="风格分析方法论"><a href="#风格分析方法论" class="headerlink" title="风格分析方法论"></a>风格分析方法论</h2><p>如何正确认识风格？<strong>风格&#x3D;题材元素+感受调性+技法风格（表现技法）</strong><br>我们可以依靠这种<strong>方法论</strong>来拆解一个项目的风格。<br><strong>题材元素：是什么内容（画面具体呈现了什么东西，区别于世界观题材）</strong><br><strong>感受调性：带给人的感受、情绪是什么？（比如压抑、搞笑、怀旧、热烈、阴冷）</strong><br><strong>技法风格：用了什么技术手段、怎么表达的（绘画技法、引擎的渲染方式（shader）、PBR、NPR、3D、2D、手绘等等）</strong></p><h2 id="举例1："><a href="#举例1：" class="headerlink" title="举例1："></a>举例1：</h2><p><img src="/../../assets/network-asset-1699863865992-fd5b00c1-feff-4575-8a2c-f8b82fba0408-20250525203434-5bfpaa6.png" alt="image.png"><br><strong>从题材上看：</strong><br>我们从画面的内容上看到旗子上的蜀、汉、诸葛，内容还有攻城车、城墙、士兵等可以知道这是一个三国题材，更进一步可以知道这是个战争题材（这是一种画面的表现内容，还可以是儿女情长，兄弟情义等）。<br><strong>从表现技法上看：</strong><br>从画面可以看出这是一个偏写实技法，有绘画质感，画面笔触较粗犷，不是超写实风格。<br><strong>从感受调性上看：</strong><br>黑云压城、炮火连天，可以感受到是非常压抑残酷，对抗激烈的情绪。</p><h2 id="分析练习："><a href="#分析练习：" class="headerlink" title="分析练习："></a>分析练习：</h2><p><img src="/../../assets/network-asset-1699864362683-2ad04af2-b731-43b5-9c12-3dc5237b81f5-20250525203434-umpkesu.png" alt="image.png"><br><strong>题材</strong>：（从CG图来看，这里不讨论这个游戏的玩法）古风题材，更细的来说是古风恋爱题材<br><strong>表现技法</strong>：偏写实，但是不是超写实，是有美型角色的那种风格，背景类似油画笔触。<br><strong>感受调性</strong>：儿女情长，男女之爱，卿卿我我，温婉细腻的情绪感受。<br><img src="/../../assets/network-asset-1699864505732-78042b37-d770-4994-b91b-dd3792d74773-20250525203435-4speagl.png" alt="image.png"><br><strong>题材</strong>：古风、战争的题材。<br><strong>表现技法</strong>：水墨笔触风格。大量的留白，画面只出现军旗未见兵。<br><strong>感受调性</strong>：决意、舍身赴死、孤独洒脱的情绪。</p><h2 id="风格的深入思考"><a href="#风格的深入思考" class="headerlink" title="风格的深入思考"></a>风格的深入思考</h2><p>思考：风格是一个很泛化的东西，上面只是一个通用的简单的思考方法论。而实际上风格多种多样，<strong>任何你可以看出差异的东西都可以称之为风格</strong>，比如头身的比例，人体结构的简化和复杂，以及与其他物体的结合（方块人、火柴人、福瑞、猫娘、舰娘、机甲等）。风格的差异，其实就是创新和多元化的产物。总之，在不同的事物领域（美术画面、听觉、文字等等）上，风格总是指那些独特、能够总结出一些特征的元素。归根结底，风格就是一个东西和另一个东西的差异（区别）点。</p><h1 id="第二条：三层设计思维"><a href="#第二条：三层设计思维" class="headerlink" title="第二条：三层设计思维"></a>第二条：三层设计思维</h1><h2 id="什么是底层逻辑，什么是顶层思维？"><a href="#什么是底层逻辑，什么是顶层思维？" class="headerlink" title="什么是底层逻辑，什么是顶层思维？"></a>什么是底层逻辑，什么是顶层思维？</h2><p>参考文章:<br><a href="https://www.zhihu.com/question/380838585">什么是底层逻辑？什么是顶层思维？</a></p><h2 id="游戏美术设计和世界观的关系"><a href="#游戏美术设计和世界观的关系" class="headerlink" title="游戏美术设计和世界观的关系"></a>游戏美术设计和世界观的关系</h2><p><img src="/../../assets/network-asset-1699873532337-4fc1fd28-86b5-40b2-ab82-98643469aa66-20250525203435-70r28ce.png" alt="image.png"><br>    什么是顶层设计逻辑和底层设计逻辑？有人说世界观是顶层思维逻辑，有人说世界观是底层思维逻辑，其实都不尽然正确。<br>我们进行美术设计的时候，一般考虑出发点：世界观、风格（题材元素、可爱的角色、战争、姿态、情绪）等等。而不是绝对的先有世界观，再设计其他元素。</p><p><strong>游戏美术设计的出发点</strong>是什么？可能我们是先有的<strong>世界观</strong>，然后根据世界观去进行<strong>美术设计</strong>；也有可能是先有<strong>一个想要创作的情绪</strong>，比如我想表达一个悲伤的情绪，然后再一步步去设计构建其他诸如世界观、题材元素等等。或者我单纯想要制作一个可爱的角色，我们想根表达角色的可爱，再以此为出发点去设计其他构成元素。所以世界观和美术设计、情绪这些并没有其中一个是<strong>绝对的底层逻辑</strong>。</p><p>而真正<strong>游戏设计的前后（上下游）<strong>​****大概是这样的，游戏制作中大概是先考虑完成世界观的构建，再根据世界观去进行美术设计。游戏研发上世界观和美术设计是上游和下游的关系。但是实际抛开游戏开发不谈，我们单纯进行美术设计的时候，世界观和美术设计并不是有一个绝对的底层逻辑。</strong></strong></p><p><strong><strong>对设计师来说：我们先来讲一讲</strong></strong>​<strong>方法论</strong>，我们一般设计东西会<strong>强调方法论，总结理论技巧方法，用来复制产出一些效果。<strong>​<strong><strong>说白了就是</strong></strong>​</strong>技法</strong>。姑且称它为<strong>中层设计</strong>，<strong>底层设计</strong>则是我们的一些想法，思考点，或者说我们的创作动机，我们想要创作一个可爱的角色、或者是表达一个情绪、展现一个世纪观之类的。基于这种<strong>底层设计</strong>，我们会思考我们要添加什么元素到我们的画面上，使用什么方法（技法）来实现我们的创作动机。这利用到了中层设计。</p><p>而<strong>顶层设计</strong>，则是指导我们设计的一种框架，设计原则，比如我们做一个项目，我们会考虑我们项目的用户（受众）是什么类型的人？（美术风格、游戏玩法、剧情体验、受众年龄、受众性别等等），基于用户类型，来指导我们进行游戏的整体框架的设计，是一种统筹谋划的思维。一般来说，你是管理层，或者独立游戏开发者，会比较注重顶层思维，这会关系到你的项目的成功与否。当然如果你是单纯的美术设计师的话，了解一下顶层思维，分析清楚你的受众，然后去进行设计，可以也会使你的作品被喜欢的概率更高，总之，了解一下顶层设计，是不会有坏处的。</p><p>网络上做自媒体有一种说法叫做<strong>基本盘</strong>，即你的作品的受众<strong>大多</strong>是什么类型的？那么这个类型就是你当自媒体的<strong>基本盘，</strong> 只要你稳固自己的基本盘，运营和维持你的基本盘，那么你基本就不会翻车。这和顶层设计的思维有一些异曲同工之妙。<br>在工作中，游戏美术设计这块上，是顶层指导中层，中层指导底层的，也可以理解为上级做框架，规定美术效果用什么技法实现，这些技法来指导我们制作我们的美术设计。</p><p>‍</p><p><img src="/../../assets/network-asset-1699874015166-0c869d2d-2c4e-489d-a899-25d165aa2609-20250525203435-yrd40lt.png" alt="image.png"></p><h1 id="第三条：抛球理论"><a href="#第三条：抛球理论" class="headerlink" title="第三条：抛球理论"></a>第三条：抛球理论</h1><p><img src="/../../assets/network-asset-1699877150636-579c84b5-4dfa-45e5-8eee-f6b48c007ff9-20250525203435-2f421r0.png" alt="image.png"><br>    抛弃理论很简单，我们游戏项目制作时，我们要同时注重游戏的美感表现、世界观背景（背景、剧情、人物的文字刻画等等）和功能体验（游戏玩法）。当然我们在这几个注重的点里要有一个更为侧重的点，当然所有的点都照顾到很好，但是大多不会面面俱全。所以我们会有一个更为侧重的点。</p><h1 id="风格分类图表："><a href="#风格分类图表：" class="headerlink" title="风格分类图表："></a>风格分类图表：</h1><p><img src="/../../assets/network-asset-1699865352885-e3ccf1df-6c04-4afd-ac0a-a191dcb44e4c-20250525203435-jkflhsa.png" alt="image.png"><br>我们可以善用表格来去对比交叉的内容<br><img src="/../../assets/network-asset-1699865452705-9daa7716-8314-4570-a4da-0c115b080586-20250525203435-euvy819.png" alt="image.png"></p><h1 id="进阶：美的塑造是哪几方面的"><a href="#进阶：美的塑造是哪几方面的" class="headerlink" title="进阶：美的塑造是哪几方面的"></a>进阶：美的塑造是哪几方面的</h1><p><img src="/../../assets/network-asset-1699863777432-d7efb5d2-d794-41f1-bd4a-5d42e3039856-20250525203435-fq71p6j.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 美术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 审美 </tag>
            
            <tag> 游戏美术设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blender基础操作与常见问题</title>
      <link href="/2025/05/25/Blender/Blender%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E4%B8%8E%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/25/Blender/Blender%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E4%B8%8E%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Blender基础操作"><a href="#Blender基础操作" class="headerlink" title="Blender基础操作"></a>Blender基础操作</h1><h2 id="通用操-作命令："><a href="#通用操-作命令：" class="headerlink" title="通用操 作命令："></a>通用操 作命令：</h2><p><strong>TAB：</strong> ​切换为编辑模式​ 、</p><p><strong>Ctrl+TAB：</strong> 切换多种模式</p><p><strong>AlT+Shift+S</strong>：拉为球形</p><p><strong>L：</strong> 循环选择相似面</p><p><strong>ctrl键选择点、线或面：拾取最短路径：</strong> 鼠标点选点线或面，选中另一个点线或面，即可拾取最</p><p>短路径</p><p><strong>Shift+h：</strong> 只显示选中的面</p><p><strong>G:移动、R：旋转、S：放缩、A:</strong> 全选物体</p><p><strong>B:</strong> 框选物体、<strong>Ctrl+i：</strong> 反选物体、<strong>I：</strong> 内插面</p><p>（选中物体按下G、R、S进行编辑时，再按x、y、z会将物体吸附在所选轴上进行编辑，按C清除吸附）</p><p>X：<strong>删除</strong>、E：<strong>挤出</strong>、Z：**着色方式、</p><p><strong>Ctrl+鼠标右键：</strong> 添加所选物体或线或点</p><p><strong>ALT+S：</strong> 沿法向缩放</p><p>H：<strong>隐藏所选</strong>、Alt+H：取消所有隐藏</p><p><strong>W：</strong> 改变选择物体的方式</p><p><strong>K：</strong> 切割（回车键确定）</p><p><strong>M:</strong> 合并点线面</p><p><strong>Ctrl+R：</strong> 环切（鼠标滑轮改变数量）</p><p><strong>Shift+鼠标左键：</strong> 多选物体</p><p><strong>Shift+鼠标右键：</strong> 将游标点移动到鼠标所在位置</p><p><strong>Shift+A：</strong> 添加物体</p><p><strong>Shift+D:</strong> 复制物体</p><p><strong>Alt+D：</strong> 关联复制</p><p><strong>Ctrl+J：</strong> 合并选中的多个物体</p><p><strong>Ctrl+E：</strong> 细分边</p><p><strong>Ctrl+B：</strong> 边线倒角</p><p><strong>Ctrl+Shift+B：</strong> 顶点倒角</p><p><strong>Ctrl+X：</strong> 融并选区</p><p><strong>Shift+TAB：</strong> 打开吸附</p><p><strong>Shift+N：</strong> 重新计算法向</p><p><strong>F12:</strong> 渲染预览</p><p><strong>在编辑模式下按Z进入线框模式，选中物体按P键：</strong> 分离所选物体，接着将鼠标右键设置原点到几何中心</p><p><strong>在编辑模式下：1：点选择、2：便选择、3：面选择</strong></p><p><strong>Shift+S：</strong> 吸附键，游标变换操作</p><p><strong>大键盘 . ：轴心点操作</strong></p><h2 id="视图命令："><a href="#视图命令：" class="headerlink" title="视图命令："></a>视图命令：</h2><p>‍</p><p><strong>Shift+鼠标中键：</strong> 移动视图​、</p><p><strong>鼠标中键：</strong> 旋转视图</p><p><strong>鼠标滑轮：</strong> 缩放视图(颗粒)</p><p><strong>Ctrl+鼠标中键：</strong> 缩放视图(丝滑)</p><p><strong>Ctrl+空格：视图窗口最大化</strong></p><p> <strong>&#x2F;：</strong> 聚焦视口到所选物体并隐藏其他物体(再按一次取消)</p><p>‍</p><p><strong>小数字键盘：</strong></p><p><strong>2、8、4、6为以所选物体为中心上下左右旋转</strong></p><p><strong>5为切换正交、透视</strong></p><p><strong>1为前视图、Ctrl+1为后视图</strong></p><p><strong>3为右视图、Ctrl+3为左视图</strong></p><p><strong>7为顶视图、Ctrl+7为底视图</strong></p><p><strong>0为摄像机视图</strong></p><p> <strong>. 为聚焦视口到所选物体</strong></p><h2 id="创建多个视口："><a href="#创建多个视口：" class="headerlink" title="创建多个视口："></a>创建多个视口：</h2><p><img src="/../../assets/image1-20231204102551-16zk4ny.png"><img src="/../../assets/image3-20231204102551-cjmtvg8.png"></p><h2 id="创建及清除父子级"><a href="#创建及清除父子级" class="headerlink" title="创建及清除父子级"></a>创建及清除父子级</h2><p>选中多个物体，按Ctrl+P选择<strong>物体</strong>，最后一个选中的物体（黄色框框中的物体）为父级，剩下的为子集。对父级进行<strong>移动旋转</strong>时，子级跟着父级一起运动。对子级进行操作，父级不受影响。</p><p>断绝父子级则按Alt+P选择清空父级</p><h2 id="轴心点操作"><a href="#轴心点操作" class="headerlink" title="轴心点操作"></a>轴心点操作</h2><p>在不建立关联和父子级的情况下，选中多个物体进行操作时，我们需要注意操作作用的位置。按<code>键盘 &gt; 键</code>​可对轴心点（操作发挥作用的点）进行操作。</p><p>质心点：物体重心的平衡点</p><p>活动元素：及激活的物体（黄色框框中的物体）的中心点</p><p><strong>各自原点：每个物体自身的中心点，此方法比较常用，适合于对多个物体或线面进行相同操作。</strong></p><h2 id="激活元素（活动元素）注意"><a href="#激活元素（活动元素）注意" class="headerlink" title="激活元素（活动元素）注意"></a>激活元素（活动元素）注意</h2><p>在物体模式下显示活动元素，其中活动元素是黄色显示。</p><p>在编辑模式中的顶点、边和面的活动元素以白色显示。</p><h2 id="环形选择（Alt-鼠标左键点选）"><a href="#环形选择（Alt-鼠标左键点选）" class="headerlink" title="环形选择（Alt+鼠标左键点选）"></a>环形选择（Alt+鼠标左键点选）</h2><p>在编辑模式下，在1点选择模式下，Alt点选可以点选选择环形，也可以点选两个点，选择两点连线的环形。</p><p>在编辑模式下，在2线选择模式下，Alt点选可选择线所在的环形。</p><p>在编辑模式下，在3面选择模式下，Alt面选可选择面环形</p><h2 id="吸附操作（Shift-TAB开启）"><a href="#吸附操作（Shift-TAB开启）" class="headerlink" title="吸附操作（Shift+TAB开启）"></a>吸附操作（Shift+TAB开启）</h2><p><img src="/../../assets/image5-20231204102551-oab17vc.png"><img src="/../../assets/image7-20231204102551-m29dxtw.png"></p><h2 id="衰减编辑模式"><a href="#衰减编辑模式" class="headerlink" title="衰减编辑模式"></a>衰减编辑模式</h2><p>按快捷键<strong>o</strong>或者在顶菜单栏上找到衰减编辑模式。进入衰减编辑模式后，选择点、线、或面，进行移动，则会拉动周围点一起变化，<strong>衰减范围</strong>用<strong>鼠标滑轮滑动进行调节</strong>。<img src="/../../assets/image9-20231204102551-2sce51t.png"></p><p><img src="/../../assets/image10-20231204102551-91lxeh8.png" alt="电脑萤幕画面 描述已自动生成"></p><h1 id="常见问题与一些小技巧"><a href="#常见问题与一些小技巧" class="headerlink" title="常见问题与一些小技巧"></a>常见问题与一些小技巧</h1><h2 id="挤出小技巧（E-Alt-E）"><a href="#挤出小技巧（E-Alt-E）" class="headerlink" title="挤出小技巧（E &#x2F; Alt+E）"></a>挤出小技巧（E &#x2F; Alt+E）</h2><p>1.多选面合并挤出</p><p><img src="/../../assets/image11-20231204102551-a5nkhq9.png" alt="电脑萤幕画面 描述已自动生成"></p><p>2.分开挤出（Alt+E选择挤出各个面）</p><p><img src="/../../assets/image12-20231204102551-yol9fhs.png" alt="电脑萤幕画面 描述已自动生成"> <img src="/../../assets/image13-20231204102551-aet5lb4.png" alt="电脑游戏的屏幕 描述已自动生成"></p><h2 id="移动点线面小技巧"><a href="#移动点线面小技巧" class="headerlink" title="移动点线面小技巧"></a>移动点线面小技巧</h2><p>按一次G进行移动，再按一次G将点、线或面固定再物体表面上移动。</p><h2 id="创建点、线、面的方法"><a href="#创建点、线、面的方法" class="headerlink" title="创建点、线、面的方法"></a>创建点、线、面的方法</h2><p><strong>生成点：</strong></p><ol><li>Shift+A创建一个立方体或其他物体</li><li>选中物体按M合并生成点</li></ol><p>或者</p><ol><li>Shift+D复制物体的一个顶点</li><li>按E挤出</li></ol><p>或者</p><ol><li>Shift+D复制物体一个顶点</li><li>按Ctrl+鼠标右键</li></ol><p><strong>生成边的中点并生成多个点：</strong></p><ol><li>选择一条边</li><li>Ctrl+E或者鼠标右键细分</li><li>Ctrl+Shift+B顶点倒角</li></ol><p><strong>生成线：</strong></p><ol><li>Shift+D复制一个点</li><li>框选两个点按F生成线</li></ol><p>或者</p><p>1.按E挤出</p><p><strong>生成面：</strong></p><p>1. Shift+A创建立方体</p><p>2. 选择立方体按M合并为一个点</p><p>3. 按E进行挤出点形成线</p><p>4. 选中所有点，按F生成面</p><p><strong>平分一条线：</strong></p><ol><li>选择一条边</li><li>Ctrl+E细分生成中点</li><li>选择新生成的两条边</li><li>按“ . ”键选择按各自原点</li><li>Ctrl+E细分生成两条边各自的中点，得到均分的四条边</li></ol><p><strong>连接两点的方法：</strong></p><ol><li>选择两点</li><li>按F连接两点或者按J连接两点</li><li>F与J的区别——F为只连接所选点，不生成与别的线交叉的点，而J则生成与其他线有交叉的点。</li></ol><h2 id="修改器的应用"><a href="#修改器的应用" class="headerlink" title="修改器的应用"></a>修改器的应用</h2><p>在使用修改器时，常常会出现修改器没有作用到物体上的效果，那是因为我们没有应用修改器的原因。但是当我们想要应用修改器时也会遇到应用选项是灰色的。这是为什么呢？这是因为我们处于编辑模式， 所以不能进行此操作，此时我们需要按TAB键返回物体模式，这时我们就可以应用修改器了！（Ctrl+A）注意，应用编辑器后就不能回到原来的状态了，只能撤回（Ctrl+Z）</p><p><img src="/../../assets/image14-20231204102551-f83ynjt.png"><img src="/../../assets/image16-20231204102551-0szp7z3.png"></p><h2 id="切割和切分之方向的控制小技巧"><a href="#切割和切分之方向的控制小技巧" class="headerlink" title="切割和切分之方向的控制小技巧"></a>切割和切分之方向的控制小技巧</h2><p><strong>按K键打开切割模式，按C开启方向控制。Shift开启中点吸附，S开启角度距离数据。</strong></p><p><strong>适用于硬表面的建模，及精细化的工业建模，制造精密的零件模型等。如机械零件。</strong></p><p><strong>切分：在T面板里有切分选项，选择面，选择切分，按Ctrl可以控制水平或垂直</strong></p><h2 id="断离顶点或面"><a href="#断离顶点或面" class="headerlink" title="断离顶点或面"></a>断离顶点或面</h2><p>选中顶点按v断离，向想要断离的方向移动。</p><h2 id="细分出现锐角或折边解决"><a href="#细分出现锐角或折边解决" class="headerlink" title="细分出现锐角或折边解决"></a>细分出现锐角或折边解决</h2><p>方法</p><p><img src="/../../assets/image135-20231204102552-ygn8sg2.jpeg" alt="图片包含 图表 描述已自动生成"></p><p>1.一个是出现了重叠顶点，按M合并顶点</p><p>2.一个是法线方向反了的问题，按A全选后按shift+N重新计算法线方向</p><p>3.出现了内部的连线问题（多连或错连），打开线框模式检查线的连接是否正确</p><h2 id="移除重合顶点"><a href="#移除重合顶点" class="headerlink" title="移除重合顶点"></a>移除重合顶点</h2><p>选中物体，或者A全选物体，按M合并顶点，按距离。</p><h2 id="拓扑面时减少顶点的方法"><a href="#拓扑面时减少顶点的方法" class="headerlink" title="拓扑面时减少顶点的方法"></a>拓扑面时减少顶点的方法</h2><p><img src="/../../assets/image136-20231204102552-8wlmyei.png" alt="图片包含 图表 描述已自动生成"></p><p>此时有七个顶点，我想要减少成三个顶点，可以这么做，选中四个顶点按G和Z向上移动，再填充面，这样就减少了四个顶点</p><p><img src="/../../assets/image137-20231204102552-pq2ekpd.png" alt="图示 描述已自动生成"><img src="/../../assets/image138-20231204102552-ynjmzit.png" alt="图片包含 室内, 小, 橙子, 空 描述已自动生成"></p><p>方法还有很多，多多摸索。</p>]]></content>
      
      
      <categories>
          
          <category> Blender </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blender </tag>
            
            <tag> 备忘 </tag>
            
            <tag> 3DCG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(一)日语发声那些事儿</title>
      <link href="/2025/05/25/Japanese/%E6%97%A5%E8%AF%AD%E5%8F%91%E9%9F%B3%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/05/25/Japanese/%E6%97%A5%E8%AF%AD%E5%8F%91%E9%9F%B3%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="发音类型"><a href="#发音类型" class="headerlink" title="发音类型"></a>发音类型</h2><p><strong>日语的发音类型有：元音、清音、浊音、半浊音、拗音、长音、促音、拨音。最重要的是促音、长音、拔音和拗音，其他的只做了解即可。发音方法请自行上网学习。</strong></p><h3 id="元音"><a href="#元音" class="headerlink" title="元音"></a><strong>元音</strong></h3><p>只有：a（あ）、i（い）、u（う）、e（え）、o（お）。</p><h3 id="清音："><a href="#清音：" class="headerlink" title="清音："></a><strong>清音：</strong></h3><p>ｋ（か行）、ｓ（さ行）、ｔ（た行）、ｎ（な行）、ｈ（は行）</p><p>ｍ（ま行）、ｙ（や行）、ｒ（ら行）、ｗ（わ行）、ｐ（ぱ行）</p><h3 id="浊音："><a href="#浊音：" class="headerlink" title="浊音："></a><strong>浊音：</strong></h3><p>g（が行）、ｚ（ざ行）、ｄ（だ行）、ｂ（ば行）</p><p><strong>が 行</strong></p><p>平假名 　　が 　　ぎ 　　ぐ 　　げ 　　ご<br>片假名 　　ガ 　　ギ 　　グ 　　ゲ 　　ゴ<br>罗马字 　　ga gi gu ge go<br>    が行假名位于词中或词尾时有鼻浊音现象，这时发音由[η]加元音拼合而成。</p><p><strong>ざ 行</strong></p><p>平假名 　　ざ 　　じ 　　ず 　　ぜ 　　ぞ<br>片假名 　　ザ 　　ジ 　　ズ 　　ゼ 　　ゾ<br>罗马字 　　za zi zu ze zo<br>    其中「じ」发音成[ji]，「ず」发音成[zi]。</p><p><strong>だ 行</strong></p><p>平假名 　　だ 　　ぢ 　　づ 　　で 　　ど<br>片假名 　　ダ 　　ヂ 　　ヅ 　　デ 　　ド<br>罗马字 da di du de do<br>    注：だ行的假名「ぢ」、「づ」与ざ行的假名「じ」、「ず」的发音完全相同。现代日语中除了连浊现象及某些习惯用法外，一般都用「じ」和「ず」<br>    例：はなぢ（鼻血）中的「ぢ」属于<strong>连浊现象</strong>。</p><p><strong>ば 行</strong></p><p>平假名 　　ば 　　び 　　ぶ 　　べ 　　ぼ<br>片假名 　　バ 　　ビ 　　ブ 　　ベ 　　ボ<br>罗马字 　　ba bi bu be bo</p><h3 id="半浊音（ぱ行）："><a href="#半浊音（ぱ行）：" class="headerlink" title="半浊音（ぱ行）："></a><strong>半浊音（ぱ行）：</strong></h3><p>日语的半浊音只有一行，共 5 个。其书写方法是在「は」行假名的右上角添加半浊音符号「ﾟ」即可。</p><p><strong>ぱ 行</strong></p><p>平假名 　　ぱ 　　ぴ 　　ぷ 　　ぺ 　　ぽ<br>片假名 　　パ 　　ピ 　　プ 　　ペ 　　ポ<br>罗马字 pa pi pu pe po</p><h3 id="长音规则（重要）："><a href="#长音规则（重要）：" class="headerlink" title="长音规则（重要）："></a><strong>长音规则（重要）：</strong></h3><p>一个假名就是一个音节，也就是一拍，称为短音。把假名的发音时间延长一拍就成了长音，其长度相当于两个音拍。片假名的长音用“ー”（键盘的-键）来表示，平假名的长音是有规律的，规则如下</p><p><strong>あ段 +「あ」</strong></p><p>例：おかあさん（妈妈）おばあさん（奶奶）</p><p><strong>い段 +「い」</strong></p><p>例：おにいさん（哥哥）おじいさん（爷爷）</p><p><strong>う段 +「う」</strong></p><p>例：つうやく（口语翻译）くうき （空气）</p><p><strong>え段 +「い」或「え」，不过常用「い」</strong></p><p>例：せんせい（老师） えいが（电影）おねえさん（用「え」）</p><p><strong>お段 +「う」或「お」，不过常用「う」</strong></p><p>例：おとうさん（爸爸）とうよう（东洋） おおきい （用「お」）</p><p><strong>片假名用「―」</strong></p><p>例：カード（卡片） センター （中心）</p><p><strong>注：一定要记住长音是拉长一拍，不要读后面所跟的假名，所以おかあさん只需拉长か再读さん即可。</strong></p><h3 id="促音「小写っ」"><a href="#促音「小写っ」" class="headerlink" title="促音「小写っ」"></a>促音「小写っ」</h3><p><strong>日语中促音是用小写「つ」来表示的，即「っ」。一般不发音，促音的要点就是为准备下一个音而等待一拍，所以促音虽然不发音却也占一拍。</strong></p><p>例：はっきり（清晰地，清楚地）中「っ」不发音，它只是为准备下一个[k]音而等待一拍。</p><p>注：促音虽然不发音，但是有无促音也会改变词义。</p><p>例：さっか是作家的意思，さか却是坡的意思。</p><h3 id="拨音「ん」"><a href="#拨音「ん」" class="headerlink" title="拨音「ん」"></a>拨音「ん」</h3><p>日语中的 <strong>「ん」</strong> 称为拨音，其平假名的书写是「ん」，片假名是「ン」，罗马字是[n]。它不能单独使用，只能附在其他假名后面。发音时，拨音占一拍。</p><h3 id="拗音"><a href="#拗音" class="headerlink" title="拗音"></a>拗音</h3><p>キャ　キュ　キョ　きゃ　きゅ　きょ</p><p>シャ　シュ　ショ　しゃ　しゅ　しょ</p><p>チャ　チュ　チョ　ちゃ　ちゅ　ちょ</p><p>ニャ　ニュ　ニョ　にゃ　にゅ　にょ</p><p>ヒャ　ヒュ　ヒョ　ひゃ　ひゅ　ひょ</p><p>ミャ　ミュ　ミョ　みゃ　みゅ　みょ</p><h3 id="外来词专用音节"><a href="#外来词专用音节" class="headerlink" title="外来词专用音节"></a>外来词专用音节</h3><p><strong>ファ（fa）、ツァ（tsa）</strong></p><p><strong>ウィ（wi）、ツィ（tsi）、ティ（ti）、フィ（fi）、ディ（di）</strong></p><p><strong>トゥ（tu）、ドゥ（du）、ヂュ（dyu）</strong></p><p><strong>ウェ（we）、シェ（she）</strong> 、<strong>チェ（che）、ツェ（tse）</strong> 、<strong>フェ（fe）、ジェ（je）</strong></p><p><strong>ウォ（wo）、ツォ（tso）、フォ（fo）</strong></p><p>等等</p><h2 id="声调"><a href="#声调" class="headerlink" title="声调"></a>声调</h2><p>日语的声调主要是指词语中各个音节之间存在的高低，只有<strong>高音和低音</strong>两种。它具有<strong>区别语言含义的作用</strong>，如果声调读错了，那么意思也就不一样了。比如橋（0 型）、箸（1 型）。</p><p>日语的发音一共两个特点：</p><ul><li><p>单词的第一个音节和第二个音节的音高一定不同。</p></li><li><p>一个单词的声调中，或没有下降，或只有一处下降</p><p>  如何理解这两个特点呢？前面说过，日语的声调主要是各个音节之间的高低关系，那么第一个特点就是第一个音节和第二个音节只会有两种情况，一种是低-高，一种是高-低。第二个特点就是，在一个单词里，要么音节的高低不会出现变化，要么只会有一个下降 ↘ 的地方。</p><p>  让我们看图更方便理解，如图，第一个音节和第二个音节一定会是 ↘ 或者 ↗；而且在一个单词中，要么没有 ↘，要么只会有一处地方有 ↘。</p></li></ul><p><img src="/../../assets/image-20240511120306-gckhs4v.png" alt="image">​</p><pre><code>明白了这两个特点，我们就可以开始发音了，在学习发音前，我们要了解**音拍**这个概念，一个音节代表一拍，而一个单词有几个音节，就有几拍。比如：学校（がっこう）这个单词，有四个音拍。了解了一个单词有几个音拍，我们还需要知道这个**单词的音调类型**，才能读出正确的单词发音。而音调类型大致分为：</code></pre><p>０ 型：表示只有第一拍低，其他各拍都高。</p><p>① 型：表示只有第一拍高，以下各拍都低。</p><p>② 型：表示只有第二拍高，第一拍和第三拍以下各拍都低。</p><p>③ 型：表示第二拍、第三拍高，第一拍和第四拍以下各拍都低。</p><p>④ 型：表示第二拍至第四拍高，第一拍和第五拍以下各拍都低。</p><p>⑤ 型：表示第二拍至第五拍高，第一拍和第六拍以下各拍都低。</p><p>⑥ 型：表示第二拍至第六拍高，第一拍和第七拍以下各拍都低。</p><p>⑦ 型以及以下各型的声调依次类推。</p><pre><code>学完上面的内容，我们就可以开始读单词了，比如说刚才的单词：学校（がっこう）是 0 型四拍单词，所以是低高高高。怎么样，你学会了吗。</code></pre><h2 id="音读和训读"><a href="#音读和训读" class="headerlink" title="音读和训读"></a>音读和训读</h2><p><strong>初探：</strong></p><p>在学习<strong>日语汉字</strong>的过程中，初学者往往绕不开「音読み」（おんよみ）】（音读）和「訓読み」（くんよみ）（训读）。那什么是音读，什么是训读？如何区分呢？今天就带大家一探究竟~</p><p>首先，我们来了解下日语文字的形成历史。简单的来说，日本的文字（平假名、片假名、汉字）是从中国借来的，平假名来源于汉字草书，片假名来源于楷书的偏旁部首。</p><p>所以日语词汇大致可分为三类：</p><ol><li>和语词汇：日语原有（训读为主）</li><li>汉语词汇：汉字组成（音读为主）</li><li>外来语：西洋等外来的音译词汇</li></ol><p><strong>什么是音读：</strong></p><p>因为日文中很多汉字都是由我国传过去的，因此<strong>很多日文汉字与古代中国汉字发音相似</strong>，并且一直保留到现在。<strong>这种仍然保留汉语读音的日文汉字发音，我们称为音读。</strong></p><p>例如，汉字“水”在中国发音为“shui”，在日语中读作“水（すい）”，它的意思是“水”，这种类似于这种中国语音的发音被称为“音读”（音読み）。</p><p>音读多是汉语词汇，例如水（すい），<strong>很少单独使用</strong>，一般是组成「水産」（すいさん）、「水分」（すいぶん）等汉字词汇。所以一般在接续（连接）其他词汇时，大多用的是音读。</p><p><strong>什么是训读</strong></p><p><strong>“训读”就是按照日文固有的发音来拼读汉字</strong>，与原本汉字的读音天差地别，<strong>只是借用了汉字的外形与意义</strong>，汉字只是一个表音的记号。比如还是水，在训读就是「みず」。</p><p><strong>总结一下：音读与训读的主要区别是：音读是与古汉字类似的发音，训读是日本自己原有的发音。</strong></p><p>以上，了解了什么是音读和训读后，我们就可以知道，一个单独的汉字，可分为音读和训读两种，例如：水的音读是（すい）、训读是（みず）。風的音读是（ふう）、训读是（かぜ）。等等……</p><p>那么，了解了这些后，我们如何辨别在语句中，这个词是用音读还是训读呢？日本的单词是音读还是训读没有绝对的规律可循，只能靠多积累，和语感。一个汉字甚至可能有几个音读和几个训读，例如：天：（音読み：てん）（訓読み：あま、あめ）。</p><p><strong>由于日语汉字有 2 种发音规律，当两个汉字组合时，就会出现 3 种组合方式：</strong></p><ol><li><p>音读加音读，如「地下（ちか)」</p></li><li><p>训读加训读，如「根元(ねもと)」</p></li><li><p>音读与训读的混合如「稲作(いなさく)」</p></li></ol><p><strong>一般，两个或以上的汉字组成的词汇、な形容词，多用音读。</strong> 如：成都（せいと）、冷蔵庫（れいぞうこ）、青春（せいしゅん）、有名（ゆうめい）、綺麗（きれい）、元気（げんき）、便利（べんり）。等等</p><p><strong>而且我们也可以用一个单词的读法去推断更多其他单词的读法</strong>，例如：東京（とうきょう）、東欧（とうおう）、東南（とうなん）、東方（とうほう）、東洋（とうよう）、東部（とうぶ）。等等</p><p><strong>一般，日语里面的动词和い形容词，只有一个字的汉字一般会用训读。</strong> 如：寝（ね）、水（みず）、風（かぜ）、道（みち）。</p><p><strong>一个词汇，可能有不同的读法，读法不同，意义也不同。</strong> 例如：風車，使用音读：（ふうしゃ）的意思是，由风驱动的大型器械，并且，使用音读多用于连用，例如：風車小屋（ふうしゃごや）。而風車的训读：（かざぐるま），指的是小孩子玩的风车玩具，并且是专用的词汇，并不会连用。</p><p>在这个例子中，可能有人会问：风车的训读不应该是（かぜくるま）吗？那么这里则涉及到了日语单词连用（复合词）中发生的<strong>变音（音便）</strong> 现象。</p><h2 id="日语中的音便规律"><a href="#日语中的音便规律" class="headerlink" title="日语中的音便规律"></a>日语中的音便规律</h2><p><a href="https://www.sigure.tw/learn-japanese/grammar/n5/21.php">https://www.sigure.tw/learn-japanese/grammar/n5/21.php</a></p><h4 id="何为音便？"><a href="#何为音便？" class="headerlink" title="何为音便？"></a>何为音便？</h4><p>當<strong>五段動詞第二變化（</strong> 动词连用形 <strong>）</strong> 接「て形」或「た形」時，為了發音方便會產生「音便」。</p><p> &lt;需具備以下所有條件：<br>必須為五span data-type&#x3D;”text” style&#x3D;”font-size: 19px;”&gt;音便的産生段動詞。<br>絕對是第二變化（連用形）。<br>接「て形」或「た形」。&lt;&#x2F;需具備以下所有條件：</p><p><strong>注：<strong>​</strong>只有五段動詞會音便！上下一段、サ變カ變都不會產生音便</strong></p><p><img src="/../../assets/image-20240523224751-8urf7sn.png" alt="image">​</p><h4 id="音便種類"><a href="#音便種類" class="headerlink" title="音便種類"></a>音便種類</h4><p>依照五段動詞語尾變化之「っ(促音)、ん(撥音)、い(イ音)」而有了以下分類：</p><p><img src="/../../assets/image-20240523224840-sbzgajz.png" alt="image">​</p><p>例外：</p><p><img src="/../../assets/image-20240523224855-ckygr9b.png" alt="image">​</p><h4 id="如何做音便？"><a href="#如何做音便？" class="headerlink" title="如何做音便？"></a>如何做音便？</h4><pre><code>這裡先簡單說明一下，由於音便來自**第二變化的「連用形」** ，因此許多教學會使用大家比較熟悉的「ます形（連用形的其中一種）」來做說明，而「ます形産生音便」的意思就是先把**動詞變為第二變化**再加上ます，接著再由ます形去做音便的變化。</code></pre><p><img src="/../../assets/image-20240523224946-gbpro0v.png" alt="image">​</p><pre><code>在看到**辭書形**的單字時（例如「聞く」）須先轉換為**第二變化的連用形**，例如ます形的「**聞き**ます」，再轉音便「聞いて」，有不少學習「ます形」的學習者會對此步驟感到麻煩，這裡提醒各位， **「ます形」只是連用形的其中一種**，事實上只要會音便，並且瞭解音便是由**第二變化連用形**而來的，那麼**不一定要做轉換「ます」這個動作**。</code></pre><p><img src="/../../assets/image-20240523225137-705j2h8.png" alt="image">​</p><p>學習者也可以直接轉換音便，但要清楚知道這個音便是由<strong>第二變化連用形</strong>而來的。以上已將音便的由來及ます形的教法交予各位，接下來為求靈活使用，本篇將使用「直接轉連用形」的方式，也就是「語尾法」來帶領各位快速掌握音便的用法。</p><p><strong>「促音便」</strong></p><p><strong>促音便</strong>又稱為ツ音便，即變化後有促音（っ），請注意促音為小寫的「っ」，並且不發音，用以頓促，因而稱為促音。當看到<strong>五段動詞原形的語尾為う、つ、る時，可直接轉連用形並改為促音。</strong></p><p><img src="/../../assets/image-20240523225329-hsrl772.png" alt="image">​</p><p> <strong>「拨音便」</strong></p><p><img src="/../../assets/image-20240523225503-x9uzqrz.png" alt="image">​</p><p> <strong>「イ音便」</strong></p><p>イ音便即變化後為イ字（い）。當五段動詞原形的語尾為<strong>ぐ、く</strong>時，可直接轉連用形並改為「<strong>い</strong>」的音。</p><p><img src="/../../assets/image-20240523225703-1qvj34f.png" alt="image">​</p><p> <strong>「例外」</strong></p><p>只有一個單字是例外：行く。<br>語尾雖然是「く」（ます形是き），但屬於促音便。</p><p><img src="/../../assets/image-20240523225736-7i0b8uw.png" alt="image">​</p><p>如果有聽過以下台詞，就不用擔心會忘記這個例外了：</p><ol><li>行ってらっしゃい。（慢走、路上小心。）</li><li>行ってきます。（我出門了。）</li><li>行ってください。（請走。）</li></ol><p> <strong>「例外 ２」</strong></p><p>語尾是「す」的不需要音便。<br>例如：話す、外す、移す…等，直接轉連用形即可。</p><p><img src="/../../assets/image-20240523225837-hvfo8cn.png" alt="image">​</p><p> <strong>「总结」</strong></p><pre><code>前面我們都是用「**て形**」做示範，而「た形」也是一樣的，只要把「て」改為「た」即可，以下我們列出常見的「て形」跟「た形」的例子。  </code></pre><p>​<img src="/../../assets/image-20240523225939-i6to14v.png" alt="image">​</p><p>只有五段動詞會做音便，上下一段動詞、カ變、サ變不需要做音便，直接用第二變化接續即可。</p><p><img src="/../../assets/image-20240523230015-st1t3c0.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> 日语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 发音 </tag>
            
            <tag> 音调 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git及Gitte远程仓库与常见问题</title>
      <link href="/2025/05/24/Git%E5%8F%8AGitte%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2025/05/24/Git%E5%8F%8AGitte%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Git及Gitte远程仓库"><a href="#Git及Gitte远程仓库" class="headerlink" title="Git及Gitte远程仓库"></a>Git及Gitte远程仓库</h1><h1 id="初始的Git配置和Totorise下载配置"><a href="#初始的Git配置和Totorise下载配置" class="headerlink" title="初始的Git配置和Totorise下载配置"></a>初始的Git配置和Totorise下载配置</h1><p>配置教程：<br><a href="https://blog.csdn.net/qq_45952294/article/details/121276730">https://blog.csdn.net/qq_45952294&#x2F;article&#x2F;details&#x2F;121276730</a><br><a href="https://blog.csdn.net/weixin_43373833/article/details/107701129">https://blog.csdn.net/weixin_43373833&#x2F;article&#x2F;details&#x2F;107701129</a><br>推送失败问题解决：<a href="https://www.cnblogs.com/qingheshiguang/p/14777557.html">https://www.cnblogs.com/qingheshiguang/p/14777557.html</a></p><h1 id="如何在自己的目录下创建Git库"><a href="#如何在自己的目录下创建Git库" class="headerlink" title="如何在自己的目录下创建Git库"></a>如何在自己的目录下创建Git库</h1><p>（❗重要，如果要在有文件的地方创建版本库，强烈建议备份文件，否则很有可能切换分支导致原来的文件被删除。）</p><p>指定一个文件夹文Git库<br><img src="/assets/network-asset-1699798166265-fc282f35-8405-41f6-9dcc-e4bd19dfadbc-20250524224448-8yxdtsz.png" alt="image.png"><br>直接点击确定<br><img src="/assets/network-asset-1699798421215-8a9d7acc-b455-466c-8c28-18ba0c057c15-20250524224448-mr6f01i.png" alt="image.png"><br>出现绿勾就表示这是一个Git库<br><img src="/assets/network-asset-1699798465176-6958a2a3-ef0c-4a6e-ac00-a68963f2fab0-20250524224448-451u9xk.png" alt="image.png"><br>在库中可以添加文件，我们可以添加一个文件试试<br><img src="/assets/network-asset-1699798545462-a0445a5a-0b87-43d7-a9e6-3f5f2c55bcbe-20250524224448-e6xw3s2.png" alt="image.png"><br>添加完之后我们可以在库里新建一个文件，此时的文件未受库的控制，所以我们要在空白处右键点击Git提交到master<br><img src="/assets/network-asset-1699799160039-fcb4aa99-8582-4fe8-b5a2-161a27744966-20250524224448-m7fr8je.png" alt="image.png"><br>记得填写日志<br><img src="/assets/network-asset-1699799195121-2a04501b-5cae-4a4f-bb80-690c0a7b7c70-20250524224448-13y5m17.png" alt="image.png"><br>提交成功<br><img src="/assets/network-asset-1699799214046-a500f4ab-b1a7-4ca9-82fc-d6dd675ab828-20250524224448-2vzxifp.png" alt="image.png"><br>这时文件显示绿色，这代表这个文件已经添加到库里了，如果修改了文件，修改文件后，记得也要Git提交到master哦！<br><img src="/assets/network-asset-1699799245304-634d810d-5a90-4bb9-8e56-62be28b935bb-20250524224448-uai5yb5.png" alt="image.png"><br><a name="ObMml"></a></p><h1 id="使用totorisegit连接Git库到Gitte远程仓库"><a href="#使用totorisegit连接Git库到Gitte远程仓库" class="headerlink" title="使用totorisegit连接Git库到Gitte远程仓库"></a>使用totorisegit连接Git库到Gitte远程仓库</h1><p>新建一个Gitte库<br><img src="/assets/network-asset-1699798101220-b3d87173-5346-4e25-83db-5fc47db62e9b-20250524224448-zu4129l.png" alt="image.png"><br>复制url链接<br><img src="/assets/network-asset-1699799873445-51ab0a37-f162-4efa-bdba-5359d14a9bde-20250524224448-xscxwke.png" alt="image.png"><br>打开totorisegit的设置<br><img src="/assets/network-asset-1699799902171-5a13dd75-60d7-420f-a021-6c57c6fd35fb-20250524224448-5rcvlwv.png" alt="image.png"></p><p>在远端里，粘贴url到URL和推送URL，给你的远端起一个名字，点击添加按钮，这时你就添加了远程仓库<br><img src="/assets/network-asset-1699799969551-fe911c99-884b-4cd9-be4c-b68dc3fa2395-20250524224448-g2nqdb7.png" alt="image.png"><br>接下来，我们推送仓库的文件到远程仓库，在我们的仓库目录下，右键空白处找到totorisegit推送。<br><img src="/assets/network-asset-1699800272850-843fd0cf-aa0e-4b45-8976-c982af6e6158-20250524224448-s8s858e.png" alt="image.png"><br>将我们远端仓库的URL复制下来粘贴到远端，我们可以看到我们的远端库名称：Anime_Origin<br><img src="/assets/network-asset-1699800384585-d739cdb0-7add-44a0-ba53-890b930bcf0d-20250524224448-mm7zv0o.png" alt="image.png"><br>如果出现以下错误，则是因为我们创建的远程仓库新建了ReadME文件或者是远端代码与你的存在差异，所以造成的本地和远程不同步。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git.exe push --set-upstream --progress &quot;AnimeOrigin&quot; master</span><br><span class="line">To https://gitee.com/a2055250755/anime_controller.git</span><br><span class="line">! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &#x27;https://gitee.com/a2055250755/anime_controller.git&#x27;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. If you want to integrate the remote changes,</span><br><span class="line">hint: use &#x27;git pull&#x27; before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方法：1.拉取远端的文件，这可以将远端有本地没有的文件拉取进来。然后再推送即可。<br><img src="/assets/network-asset-1699802977517-8f007db7-fea0-4dfd-81c2-f31d611a905f-20250524224448-8h4v95j.png" alt="image.png"><br>2.强推，勾选两个的其中一个，直接覆盖，一般选择第一个。<br><img src="/assets/network-asset-1699803988859-adca54b6-1f32-44cb-b10b-a6a92eba3dfc-20250524224448-4i0ie4f.png" alt="image.png"><br>点击确定，推送成功。<br><img src="/assets/network-asset-1699804157433-01f3bf04-f136-40e9-8597-ea73a6e2da7d-20250524224449-5wdr6vh.png" alt="image.png"><img src="/assets/network-asset-1699804161739-e279f209-bfea-4b1d-b8bf-a6daf8e5a031-20250524224449-11ni5ya.png" alt="image.png"><br>这里，我们的tortorisegit连接Gitte远程仓库就成功啦！Github创建远程仓库连接同理。<br><a name="hfqp7"></a></p><h3 id="git使用方法"><a href="#git使用方法" class="headerlink" title="git使用方法"></a>git使用方法</h3><p><a href="https://zhuanlan.zhihu.com/p/190027619">https://zhuanlan.zhihu.com/p/190027619</a><br><a href="https://zhuanlan.zhihu.com/p/135183491">https://zhuanlan.zhihu.com/p/135183491</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">然后进入文件夹，git bash here 输入参数，</span><br><span class="line">git remote add origin https://gitee.com/xxxxx/xxxxxxxxx.git</span><br><span class="line">如果更改仓库地址 删除方法:git remote rm origin</span><br><span class="line">执行后，再使用第一步操作更改</span><br><span class="line"></span><br><span class="line">可忽略！！！！！ git add&lt;文件名&gt; 将文件修改添加到暂存区</span><br><span class="line"></span><br><span class="line">git commit -m &quot;first commit&quot;===备注--告诉git提交到库的备注提交到本地仓库</span><br><span class="line">git push -u origin master===上传文件提交到远程仓库</span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line">git log查看提交记录</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="oa9Iz"></a></p><h3 id="TortoiseGit使用方法"><a href="#TortoiseGit使用方法" class="headerlink" title="TortoiseGit使用方法"></a>TortoiseGit使用方法</h3><p><a href="https://www.cnblogs.com/anayigeren/p/10177027.html">https://www.cnblogs.com/anayigeren/p/10177027.html</a></p><p>更改（TortoiseGit）远程仓库<a href="https://blog.csdn.net/CHenJiAYi__/article/details/123591119">https://blog.csdn.net/CHenJiAYi__&#x2F;article&#x2F;details&#x2F;123591119</a><br><a name="GABmu"></a></p><h6 id="添加项目："><a href="#添加项目：" class="headerlink" title="添加项目："></a>添加项目：</h6><p>创建仓库：<img src="/assets/network-asset-1699772557607-d2009a1b-64d3-4087-9494-9d3126c1bebe-20250524224449-5f3ri7w.png" alt="image.png"><br>确定地址：<img src="/assets/network-asset-1699772576461-4669155d-fa0f-4788-a701-a1b1214c2783-20250524224449-7pj0np7.png" alt="image.png"><br>克隆（空项目）：<img src="/assets/network-asset-1699772641309-44f7cc59-3776-456c-a14a-3eaa35764926-20250524224449-pf38pvw.png" alt="image.png"><br>输入地址：<img src="/assets/network-asset-1699772657011-e0251275-d41a-48e8-9ed6-a8f82e3b569d-20250524224449-m3yyung.png" alt="image.png"></p><p>进入项目，创建文件（<a href="https://blog.csdn.net/Lakers2015/article/details/112320092">https://blog.csdn.net/Lakers2015/article/details/112320092</a>）<br><img src="/assets/network-asset-1699772963599-f5076294-4dda-4da5-8787-e25a975fbe85-20250524224449-1edpalc.png" alt="image.png"><br>提交到主分支，日志不可为空，下方文件需要勾选，才可以提交<br><img src="/assets/network-asset-1699772998599-c27305c0-c33b-4b65-878e-e4d9ad837075-20250524224449-fnq7dzs.png" alt="image.png"><img src="/assets/network-asset-1699773141291-d62aac80-bc6d-459d-aba6-71cfecbe7d3e-20250524224449-rixkc1c.png" alt="image.png"><br>日志写法:</p><ol><li>第一行：提交修改内容的摘要</li><li>第二行：空格</li><li>第三行以后：修改的理由</li></ol><p>推送<br><img src="/assets/network-asset-1699773663437-79f1fd69-90fb-4cdc-8641-1acf334e6c5a-20250524224449-tydce3f.png" alt="image.png"><br><a name="pN4uM"></a></p><h6 id="成员操作"><a href="#成员操作" class="headerlink" title="成员操作"></a>成员操作</h6><p>创建分支：<br><img src="/assets/network-asset-1699772756782-749bff3a-0248-4d08-a555-c14de16d90a1-20250524224449-2rpvchj.png" alt="image.png"><img src="/assets/network-asset-1699773204189-ffc505e6-10a0-42d0-b1e7-73f5a4979c57-20250524224449-s4s11yr.png" alt="image.png"><br>切换分支：<br><img src="/assets/network-asset-1699773233058-15854f45-502d-432c-b5e9-583d5e226a22-20250524224449-memcrwx.png" alt="image.png"><br>选择新建的<br><img src="/assets/network-asset-1699773263960-b82aaad4-1fce-4e93-8323-b3f90c7ba174-20250524224449-50jijwa.png" alt="image.png"><img src="/assets/network-asset-1699773290614-3788c1f4-7671-4482-b635-95631091619e-20250524224449-vvj8dz9.png" alt="image.png"><br>在此分支上修改<br><img src="/assets/network-asset-1699773374350-b22b4ddc-5612-4510-b582-b3a160f9b760-20250524224449-nkya8k1.png" alt="image.png"><br>修改完后提交<br><img src="/assets/network-asset-1699773409280-ced21e01-e2b4-4abc-b829-51a2655c1db2-20250524224449-p2vvph9.png" alt="image.png"><img src="/assets/network-asset-1699773467956-c6d02a94-c5a8-468a-b3fd-54fcde4440d1-20250524224449-b2n54ue.png" alt="image.png"><br>推送<br><img src="/assets/network-asset-1699773527937-3ee22162-d9a3-4bd4-827f-87fd1baf223b-20250524224449-57x0dwf.png" alt="image.png"><br>拉取主分支<br><img src="/assets/network-asset-1699773785997-b0fdb934-a500-4b27-b917-8238c9fdc76a-20250524224449-2gk55y0.png" alt="image.png"><br>推送主分支<br><img src="/assets/network-asset-1699773807024-92299e49-54f0-404f-884a-65d9b53da29d-20250524224449-hy7g7od.png" alt="image.png"><img src="/assets/network-asset-1699773824228-f460f72c-5c4b-4f3a-a15a-81fab3be7233-20250524224449-hznlf6f.png" alt="image.png"></p><p><a name="Xm4nk"></a></p><h3 id="VScode使用方法"><a href="#VScode使用方法" class="headerlink" title="VScode使用方法"></a>VScode使用方法</h3><p><a href="https://blog.csdn.net/weixin_33232568/article/details/97757384">https://blog.csdn.net/weixin_33232568&#x2F;article&#x2F;details&#x2F;97757384</a><br>​<a href="https://zhuanlan.zhihu.com/p/441835934">https://zhuanlan.zhihu.com/p/441835934</a></p><p><a name="dedfd"></a></p><h3 id="UE项目使用方法"><a href="#UE项目使用方法" class="headerlink" title="UE项目使用方法"></a>UE项目使用方法</h3><p><a href="https://ue5wiki.com/wiki/7647/">https://ue5wiki.com/wiki/7647/</a></p><p><a name="yNZXX"></a></p><h2 id="项目太大-如何解决"><a href="#项目太大-如何解决" class="headerlink" title="项目太大 如何解决"></a>项目太大 如何解决</h2><h1 id="Git切换分支导致本地文件删除解决方法"><a href="#Git切换分支导致本地文件删除解决方法" class="headerlink" title="Git切换分支导致本地文件删除解决方法"></a>Git切换分支导致本地文件删除解决方法</h1><p>解决方法：</p><p>1.打开GitBash</p><p><img src="/assets/image-20241025210450-gkb2vbj.png" alt="image">​</p><p>2.执行指令 <code>git reflog</code>​</p><p>然后找到之前commit(提交)的分支，</p><p>git checkout d113b23（开头的黄色序号） 切换过来，不知道是哪个可以一个一个切，然后看文件回来了没。</p><p>git checkout -b xxxxx     重命名，自己起名字：例如：branch</p><p>git checkout master   切换回主分支</p><p>git merge xxxxx      将分支合并到master分支</p><p>git branch -d xxxxx   删除掉自己命名的临时分支</p><p><img src="/assets/image-20241025211018-bypvgob.png" alt="image"></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
